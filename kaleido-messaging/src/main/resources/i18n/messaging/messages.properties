# Transport Registry
#*****************************
messaging.error.register.none=Transport key.name={0}) has not been yet instanciate and registered
messaging.error.register.already=Transport key.name={0} has already been registered.
messaging.error.register.illegal=Transport key.name={0} registered type is {1}, and it should be {2}

# RDV
#*****************************
messaging.transport.rdv.service=RDV service must be specied to instanciate transport.
messaging.transport.rdv.daemon=RDV daemon must be specied to instanciate transport.
messaging.transport.rdv.type=RDV type (reliable, certified, dqueue) must be specied to instanciate transport.

messaging.transport.rdv.open=Can't open native tibco RDV implementation.
messaging.transport.rdv.create=Can't create tibco RDV Transport.
messaging.transport.rdv.close=Error closing RDV transport.
messaging.transport.rdv.timeout=timeout transport value ({0}), must be a double value in second.  

messaging.consumer.rdv.create=Can't create tibco RDV Listener.
messaging.consumer.rdv.dispatch=RDV error during dispatching event for listener.
messaging.consumer.rdv.subject=Subjects must be defined for listener.
messaging.consumer.rdv.transport=Transport reference name must be defined for listener.
messaging.consumer.rdv.queue.dispatch=RDV Queue dispatch event erroe : {0}

messaging.producer.rdv.subject=Subjects must be defined for publisher.
messaging.producer.rdv.transport=Transport reference name must be defined for publisher.

messaging.transport.rdv.message.build=Error during converting RDV message to XmlMessage : {0}.
messaging.transport.rdv.message.xml.parse=Error during parsing Xml RDV message to XmlMessage : {0}.
messaging.transport.rdv.message.confirm=Error during message confirmation : {0}
messaging.transport.rdv.message.reply=Error during message replying: {0}

messaging.transport.rdv.message.serialize=IOException when serializing RDV JavaBeanMessage : {0}. Check that class of your JavaBean implements Serializable...
messaging.transport.rdv.message.deserialize.classnotfound=ClassNotFound when deserializing RDV JavaBeanMessage : {0}
messaging.transport.rdv.message.deserialize=IOException when deserializing RDV JavaBeanMessage : {0}

# JMS
#*****************************
messaging.transport.jms.connection.create=Error closing JMS connection.
messaging.transport.jms.session.create=Error closing JMS user session.
messaging.transport.jms.connection.close=Error closing JMS connection.
messaging.transport.jms.session.close=Error closing JMS user session.

messaging.transport.jms.connection.factory.name=JMS JNDI name for instanciating ConnectionFactory must be specified
messaging.transport.jms.connection.factory.context=JMS JNDI context information for instanciating ConnectionFactory must be specified
messaging.transport.jms.connection.factory.lookup=Error during jndi lookup to ConnectionFactory {0}. {1}

messaging.producer.jms.transport=Transport reference name must be defined for publisher.
messaging.producer.jms.message.serialize=IOException when serializing JMS JavaBeanMessage : {0}. Check that class of your JavaBean implements Serializable...
messaging.producer.jms.message.build=Error during building JMS message (before sending).
messaging.producer.jms.message.send=Error when sending JMS message.
messaging.producer.jms.destination.lookup=Error during jndi lookup [{0}] to Destination (Queue, Topic) [{1}]. Check configuration of destination name {1}.